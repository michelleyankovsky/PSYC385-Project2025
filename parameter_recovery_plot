import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize
from scipy.stats import truncnorm

# --------------------- Helper Functions ---------------------

def get_truncated_normal(mean, std, lower, upper):
    a, b = (lower - mean) / std, (upper - mean) / std
    return truncnorm.rvs(a, b, loc=mean, scale=std)

def prospect_theory_value(p, V, alpha, beta):
    weighted_probability = p ** (1 - beta)
    subjective_value = weighted_probability * (V ** alpha)
    return subjective_value

def choice_prob(delta_sv, mu):
    safe_values = np.clip(-mu * delta_sv, -700, 700)
    return 1 / (1 + np.exp(safe_values))

# --------------------- Data Simulation ---------------------

def simulate_data(num_subjects, num_trials):
    all_data = []
    true_params = []

    for subj in range(num_subjects):
        alpha = np.random.uniform(0.3, 1.5)
        beta = np.random.uniform(0.2, 1.0)
        mu = np.random.uniform(1.0, 15.0)

        for trial in range(num_trials):
            p_risky = np.random.choice([0.5, 0.9])
            reward_risky = np.random.uniform(5, 20)
            reward_certain = np.random.uniform(1, 20)

            sv_risky = prospect_theory_value(p_risky, reward_risky, alpha, beta)
            sv_certain = reward_certain ** alpha
            delta_sv = sv_risky - sv_certain

            pr = choice_prob(delta_sv, mu)
            choice = np.random.rand() < pr

            all_data.append([subj, trial, p_risky, reward_risky, reward_certain, int(choice)])
        true_params.append([subj, alpha, beta, mu])

    df = pd.DataFrame(all_data, columns=["subject", "trial", "p_risky", "reward_risky", "reward_certain", "choice"])
    params_df = pd.DataFrame(true_params, columns=["subject", "alpha_true", "beta_true", "mu_true"])
    return df, params_df

# --------------------- Likelihood & Fitting ---------------------

def neg_log_likelihood(params, data):
    alpha, beta, mu = params

    sv_risky = prospect_theory_value(data["p_risky"], data["reward_risky"], alpha, beta)
    sv_certain = data["reward_certain"] ** alpha
    delta_sv = sv_risky - sv_certain
    p_risky = choice_prob(delta_sv, mu)

    p_risky = np.clip(p_risky, 1e-6, 1 - 1e-6)
    log_likelihood = np.where(data["choice"] == 1, np.log(p_risky), np.log(1 - p_risky))
    return -np.sum(log_likelihood)

def fit_parameters(df):
    recovered = []

    for subj in df["subject"].unique():
        sub_data = df[df["subject"] == subj]
        initial = [0.5, 0.5, 5.0]
        bounds = [(0.01, 2.0), (0.01, 1.0), (0.1, 20.0)]
        res = minimize(neg_log_likelihood, initial, args=(sub_data,), bounds=bounds)

        if res.success:
            recovered.append([subj] + list(res.x))
        else:
            recovered.append([subj, np.nan, np.nan, np.nan])

    return pd.DataFrame(recovered, columns=["subject", "alpha_fit", "beta_fit", "mu_fit"])

# --------------------- Total MSE Only ---------------------

def compute_total_mse_over_trials(df, true_params, max_trials=1400):
    trial_counts = np.arange(100, max_trials + 1, 100)
    mse_total, sem_total = [], []

    for t in trial_counts:
        subset = df[df["trial"] < t]
        fits = fit_parameters(subset)
        merged = true_params.merge(fits, on="subject")

        diff_alpha = merged["alpha_fit"] - merged["alpha_true"]
        diff_beta  = merged["beta_fit"]  - merged["beta_true"]
        diff_mu    = merged["mu_fit"]    - merged["mu_true"]

        se_total = ((diff_alpha ** 2) + (diff_beta ** 2) + (diff_mu ** 2)) / 3
        mse_total.append(se_total.mean())
        sem_total.append(se_total.std(ddof=1) / np.sqrt(len(se_total)))

    return trial_counts, mse_total, sem_total

# --------------------- Run & Plot ---------------------

num_subjects = 100
num_trials = 1400

data, true_params = simulate_data(num_subjects, num_trials)

trials, mse_total, sem_total = compute_total_mse_over_trials(data, true_params)

plt.figure(figsize=(10, 6))
plt.errorbar(trials, mse_total, yerr=sem_total, label='Total MSE', capsize=4, color='black', linestyle='--', linewidth=2)
plt.xlabel("Number of Trials", fontsize=14)
plt.ylabel("Mean Squared Error", fontsize=14)
plt.title("Total Parameter Recovery Error Over Trials", fontsize=16)
plt.ylim(10, 40)  # <<<< Set y-axis range here
plt.xlim(100, 1400)
plt.grid(True, linestyle='--', linewidth=0.5)
plt.legend(fontsize=12)
plt.tight_layout()
plt.show()
